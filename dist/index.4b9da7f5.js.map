{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\n// BANKIST APP\n///////////////////////////////////////////////\n// Data\n\n// DIFFERENT DATA! Contains movement dates, currency and locale\n\nconst account1 = {\n  owner: 'Jonas Schmedtmann',\n  movements: [200, 455.23, -306.5, 25000, -642.21, -133.9, 79.97, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n\n  movementsDates: [\n    '2019-11-18T21:31:17.178Z',\n    '2019-12-23T07:42:02.383Z',\n    '2020-01-28T09:15:04.904Z',\n    '2022-04-10T10:17:24.185Z',\n    '2022-04-17T14:11:59.604Z',\n    '2022-04-18T17:01:17.194Z',\n    '2022-04-18T23:36:17.929Z',\n    '2022-04-20T10:51:36.790Z',\n  ],\n  currency: 'EUR',\n  locale: 'pt-PT', // de-DE\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n\n  movementsDates: [\n    '2019-11-01T13:15:33.035Z',\n    '2019-11-30T09:48:16.867Z',\n    '2019-12-25T06:04:23.907Z',\n    '2020-01-25T14:18:46.235Z',\n    '2020-02-05T16:33:06.386Z',\n    '2020-04-10T14:43:26.374Z',\n    '2020-06-25T18:49:59.371Z',\n    '2020-04-20T12:01:20.894Z',\n  ],\n  currency: 'USD',\n  locale: 'en-US',\n};\n\nconst accounts = [account1, account2];\n\n/////////////////////////////////////////////////\n// Elements\nconst labelWelcome = document.querySelector('.welcome');\nconst labelDate = document.querySelector('.date');\nconst labelBalance = document.querySelector('.balance__value');\nconst labelSumIn = document.querySelector('.summary__value--in');\nconst labelSumOut = document.querySelector('.summary__value--out');\nconst labelSumInterest = document.querySelector('.summary__value--interest');\nconst labelTimer = document.querySelector('.timer');\n\nconst containerApp = document.querySelector('.app');\nconst containerMovements = document.querySelector('.movements');\n\nconst btnLogin = document.querySelector('.login__btn');\nconst btnTransfer = document.querySelector('.form__btn--transfer');\nconst btnLoan = document.querySelector('.form__btn--loan');\nconst btnClose = document.querySelector('.form__btn--close');\nconst btnSort = document.querySelector('.btn--sort');\n\nconst inputLoginUsername = document.querySelector('.login__input--user');\nconst inputLoginPin = document.querySelector('.login__input--pin');\nconst inputTransferTo = document.querySelector('.form__input--to');\nconst inputTransferAmount = document.querySelector('.form__input--amount');\nconst inputLoanAmount = document.querySelector('.form__input--loan-amount');\nconst inputCloseUsername = document.querySelector('.form__input--user');\nconst inputClosePin = document.querySelector('.form__input--pin');\n\n/////////////////////////////////////////////////\n// Functions\nconst movementDate = function (date, locale) {\n  const caldatePassed = function (date2, date1) {\n    return Math.round(Math.abs((date1 - date2) / (1000 * 60 * 60 * 24)));\n  };\n  const daysPassed = caldatePassed(new Date(), date);\n  // console.log(daysPassed);\n\n  if (daysPassed === 0) return `Today`;\n  if (daysPassed === 1) return `Yesterday`;\n  if (daysPassed <= 7) return `${daysPassed} days ago`;\n  else {\n    return new Intl.DateTimeFormat(locale).format(date);\n  }\n};\nconst displayMovements = function (acc, sort = false) {\n  containerMovements.innerHTML = '';\n\n  const movs = sort\n    ? acc.movements.slice().sort((a, b) => a - b)\n    : acc.movements;\n\n  movs.forEach(function (mov, i) {\n    const type = mov > 0 ? 'deposit' : 'withdrawal';\n    const date = new Date(acc.movementsDates[i]);\n    const displayDate = movementDate(date, acc.locale);\n\n    const fornattedMovement = new Intl.NumberFormat(acc.locale, {\n      style: `currency`,\n      currency: `${acc.currency}`,\n    }).format(mov);\n\n    const html = `\n      <div class=\"movements__row\">\n        <div class=\"movements__type movements__type--${type}\">${\n      i + 1\n    } ${type}</div>\n        <div class=\"movements__date\">${displayDate} </div>\n        <div class=\"movements__value\">${fornattedMovement}</div></div>`;\n    containerMovements.insertAdjacentHTML('afterbegin', html);\n    // containerMovements.append(html);\n    // containerMovements.prepend(html);\n  });\n};\n\nconst calcDisplayBalance = function (acc) {\n  acc.balance = acc.movements.reduce((acc, mov) => acc + mov, 0);\n  const calculatedbal = new Intl.NumberFormat(acc.locale, {\n    style: `currency`,\n    currency: acc.currency,\n  }).format(acc.balance);\n  // labelBalance.textContent = acc.balance\n  labelBalance.textContent = `${calculatedbal}`;\n};\n\nconst calcDisplaySummary = function (acc) {\n  const incomes = acc.movements\n    .filter(mov => mov > 0)\n    .reduce((acc, mov) => acc + mov, 0);\n\n  const suminalculation = new Intl.NumberFormat(acc.locale, {\n    style: `currency`,\n    currency: acc.currency,\n  }).format(incomes);\n  labelSumIn.textContent = `${suminalculation}`;\n\n  const out = acc.movements\n    .filter(mov => mov < 0)\n    .reduce((acc, mov) => acc + mov, 0);\n\n  const outcalculation = Intl.NumberFormat(acc.locale, {\n    style: `currency`,\n    currency: acc.currency,\n  }).format(Math.abs(out));\n\n  labelSumOut.textContent = `${outcalculation}`;\n\n  const interest = acc.movements\n    .filter(mov => mov > 0)\n    .map(deposit => (deposit * acc.interestRate) / 100)\n    .filter((int, i, arr) => {\n      // console.log(arr);\n      return int >= 1;\n    })\n    .reduce((acc, int) => acc + int, 0);\n\n  const intrestcalculation = new Intl.NumberFormat(acc.locale, {\n    style: `currency`,\n    currency: acc.currency,\n  }).format(interest);\n\n  labelSumInterest.textContent = `${intrestcalculation}`;\n};\n\nconst createUsernames = function (accs) {\n  accs.forEach(function (acc) {\n    acc.username = acc.owner\n      .toLowerCase()\n      .split(' ')\n      .map(name => name[0])\n      .join('');\n  });\n};\ncreateUsernames(accounts);\n\nconst updateUI = function (acc) {\n  // Display movements\n  displayMovements(acc);\n  // Display balance\n  calcDisplayBalance(acc);\n  // Display summary\n  calcDisplaySummary(acc);\n};\nconst startlogoutTimer = function () {\n  const tick = function () {\n    const min = String(Math.trunc(time / 60)).padStart(2, 0);\n    const sec = String(time % 60).padStart(2, 0);\n    // in each call, print the remainig time to the UI\n    labelTimer.textContent = `${min}:${sec}`;\n    if (time === 0) {\n      labelWelcome.textContent = ` user timeout login to get started  `;\n      setTimeout(function () {\n        labelWelcome.textContent = `login to get started`;\n      }, 2000);\n      containerApp.style.opacity = 0;\n\n      clearInterval(timer);\n    }\n    time--; // this will reduce the number by one every sec\n    // when the  time is at zero logout user\n  };\n  // setting the timmer to 5 minimum\n  let time = 10;\n  tick();\n  // call the timmer every one second here\n  const timer = setInterval(tick, 1000);\n  return timer;\n};\n///////////////////////////////////////\n// Event handlers\nlet currentAccount, timer;\n\nconst newDate = new Date();\n// console.log(newDate);\n// const day = `${newDate.getDay()}`.padStart(2, 0);\n// const days = newDate.getTime();\n// console.log(days);\n// const month = `${newDate.getMonth() + 1}`.padStart(2, 0);\n// const year = newDate.getFullYear();\n// const hours = newDate.getHours();\n// const min = newDate.getMinutes();\n// const p = newDate.toLocaleDateString() + ` ${hours}:` + `${min}`;\n// console.log(p);\nconst argue = {\n  hours: `numeric`,\n  minite: `numeric`,\n  day: `numeric`,\n  month: `numeric`,\n  year: `numeric`,\n  // weekday: `long`,\n};\n// const local = navigator.language;\n// console.log(local);\n// labelDate.textContent = new Intl.DateTimeFormat(local, argue).format(newDate);\n// const international = new Intl.DateTimeFormat(`en-US`, argue).format(newDate);\n// console.log(international);\n// console.log(`${day}/${month}/${year}`);\nbtnLogin.addEventListener('click', function (e) {\n  // Prevent form from submitting\n  e.preventDefault();\n\n  currentAccount = accounts.find(\n    acc => acc.username === inputLoginUsername.value\n  );\n  console.log(currentAccount);\n\n  if (currentAccount?.pin === +inputLoginPin.value) {\n    // Display UI and message\n    labelWelcome.textContent = `Welcome back, ${\n      currentAccount.owner.split(' ')[0]\n    }`;\n    containerApp.style.opacity = 100;\n\n    // Clear input fields\n    inputLoginUsername.value = inputLoginPin.value = '';\n    inputLoginPin.blur();\n    // update time\n    labelDate.textContent = new Intl.DateTimeFormat(\n      currentAccount.locale,\n      argue\n    ).format(newDate);\n    if (timer) {\n      clearInterval(timer);\n    }\n    timer = startlogoutTimer();\n    // Update UI\n    updateUI(currentAccount);\n  }\n});\n\nbtnTransfer.addEventListener('click', function (e) {\n  e.preventDefault();\n  const amount = +inputTransferAmount.value;\n  // const silde_down = btnTransfer.getBoundingClientRect\n\n  const receiverAcc = accounts.find(\n    acc => acc.username === inputTransferTo.value\n  );\n  inputTransferAmount.value = inputTransferTo.value = '';\n\n  if (\n    amount > 0 &&\n    receiverAcc &&\n    currentAccount.balance >= amount &&\n    receiverAcc?.username !== currentAccount.username\n  ) {\n    // Doing the transfer\n    currentAccount.movements.push(-amount);\n    receiverAcc.movements.push(amount);\n\n    // updateing the movement date\n    currentAccount.movementsDates.push(new Date().toISOString());\n    receiverAcc.movementsDates.push(new Date().toISOString());\n    // Update UI\n    updateUI(currentAccount);\n    // reset the timmer when a transfer is being carried output\n    clearInterval(timer);\n    timer = startlogoutTimer();\n  }\n});\n\nbtnLoan.addEventListener('click', function (e) {\n  e.preventDefault();\n\n  const amount = Math.floor(Number(inputLoanAmount.value));\n\n  if (amount > 0 && currentAccount.movements.some(mov => mov >= amount * 0.1)) {\n    // Add movement\n    currentAccount.movements.push(amount);\n    currentAccount.movementsDates.push(new Date().toISOString());\n    // Update UI\n    updateUI(currentAccount);\n  }\n  inputLoanAmount.value = '';\n  clearInterval(timer);\n  timer = startlogoutTimer();\n});\n\nbtnClose.addEventListener('click', function (e) {\n  e.preventDefault();\n\n  if (\n    inputCloseUsername.value === currentAccount.username &&\n    +inputClosePin.value === currentAccount.pin\n  ) {\n    const index = accounts.findIndex(\n      acc => acc.username === currentAccount.username\n    );\n    console.log(index);\n    // .indexOf(23)\n\n    // Delete account\n    accounts.splice(index, 1);\n\n    // Hide UI\n    containerApp.style.opacity = 0;\n  }\n\n  inputCloseUsername.value = inputClosePin.value = '';\n  clearInterval(timer);\n  timer = startlogoutTimer();\n});\n\nlet sorted = false;\nbtnSort.addEventListener('click', function (e) {\n  e.preventDefault();\n  displayMovements(currentAccount.movements, !sorted);\n  sorted = !sorted;\n});\n\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// LECTURES\n\n// console.log(24 === 24.4);\n// console.log(0.1 * 0.2 == 0.3);\n// // convering a string to a number\n// // 1)\n// console.log(Number(`55`));\n// // 2)\n// console.log(+`55`);\n// // using the parsing method\n// // redix is being passed in by paresein and is the base of the system we are using\n// console.log(Number.parseInt(`30px`, 10)); //this is used to read the figures in the UI that comes with letters // //// output will be  (30)\n// console.log(Number.parseInt(`30px`));\n\n// // the parseflote stops at the decimal point\n\n// console.log(Number.parseFloat(`3.3px`, 10)); //this wil stop where the decimal is .... ///////// output(3.3)\n\n// // isfinite method\n// console.log(Number.isFinite(30)); // it returns a true or false if the value is\n\n// // using the math method using\n\n// console.log(Math.max(5, 1, 23, 24, 46, 76, 6)); //this is used to determine the maximum value in an array or a group of numbers\n// console.log(Math.min(1, 24, 5, 63, 14, 12, 3)); //this is used determine the minimum value in the array of group of numbers\n\n// // using the math method to calculate the redious of a circle\n// console.log(Math.PI * Number.parseFloat(`10px`) ** 2);\n\n// // generating rendom numbers\n// console.log(Math.trunc(Math.random() * 6) + 1);\n// // this is used to round a figure but won't work if it is a negative number we are recomended to use the floor method\n// // floor method instead of using the trun method\n// console.log(Math.floor(Math.random() * 6) + 1);\n\n// // using it as a function\n// const randomint = function (max, min) {\n//   return Math.floor(Math.random() * (max - min) + 1) + min;\n// };\n// console.log(randomint(10, 20));\n\n// // rounding integers .... they display an output without any descimal point\n\n// this will round the figure without putting into consederation the numbers after the  decimal point\n\n// console.log(Math.trunc(23.62));\n// console.log(Math.floor(23.62));\n\n// // this will round it up to the nearest decimal place\n\n// console.log(Math.round(23.62));\n// console.log(Math.ceil(23.62));\n// console.log(Math.round(23.62));\n\n// // flooting point numbers aks decimals\n\n// // the Tofix method returns a string and not a number\n// console.log((2.7).toFixed(5)); //this will return a string ........ to set the amount of decimal places we insert the number into the tofixed braket\n// // both are the same\n\n// console.log(+(2.7).toFixed()); //this will return a number.....to set the amount of decimal places we insert the number into the tofixed braket but it won't work if the string has benn cnverted to a number\n\n// console.log(Number((2.775).toFixed())); //this will return a number .........to set the amount of decimal places we insert the number into the tofixed braket but it won't work if the string has been converted to a number\n\n// the reminder operator ..... this is represented by (%)\n\n// console.log(5 % 2); // this is the same thing as 2 * 2 + 1\n// // a number is even when it is devisble by 2 and it give a 0 value\n\n// const isEven = n => n % 2 == 0; // this is to determine if the number is an even number //////// if the not operator is added (!) it will ckeck for the ODD number\n// console.log(isEven(23));\n// console.log(isEven(32));\n// console.log(isEven(14));\n// console.log(isEven(8));\n\n// labelBalance.addEventListener('click', function () {\n//   [...document.querySelectorAll(`.movements__row`)].forEach(function (row, i) {\n//     if (i % 2 === 0) {\n//       row.style.backgroundColor = `orangered`;\n//     }\n//     if (i % 3 === 0) {\n//       row.style.backgroundColor = `blue`;\n//     }\n//   });\n// });\n\n// const diameter = 287_460_000_000;\n// console.log(diameter);\n// // the underscore is only for the human readable eye .... it does not affect the output or what is being logged\n\n// // working with BIGINT\n// console.log(Number.MAX_SAFE_INTEGER);\n// console.log(Number.MIN_SAFE_INTEGER);\n// // bigint is used to read bignumbers on javascript\n// console.log(typeof 714874937734798392873877377278374832979n);\n\n// // understaning date and time read\n// // create a date\n// // ... first method\n// const now = new Date();\n// console.log(now);\n// // ....second method\n// console.log(new Date(`nov 27 1999`));\n// console.log(new Date(account1.movementsDates[0]));\n\n// // different methods\n// const future = new Date(2037, 10, 19, 15, 23);\n// console.log(future.getTime());\n// console.log(future.getFullYear());\n// console.log(future.getMonth());\n// console.log(future.getDay());\n// console.log(future.getMinutes());\n// console.log(future.getTime(1650532627002));\n// console.log(future.getHours());\n// console.log(future.toISOString()); //universal time\n// console.log(future.toJSON());\n// console.log(new Date(1650532627002));\n// console.log(Date.now(1650532627002));\n\n// // more date operation\n\n// const caldatePassed = function (date2, date1) {\n//   return Math.round(Math.abs((date2 - date1) / (1000 * 60 * 60 * 24)));\n// };\n// const days1 = caldatePassed(new Date(2022, 3, 14), new Date(2022, 3, 24));\n// console.log(days1);\n//\nconst options = {\n  style: `currency`, //this can be unit,percent or currency .... but this will have to be laterly defined\n  unit: `mile-per-hour`, // we can also put in temperature (`celsius`)\n  currency: `USD`, // this is used if the individuals needs to display the currency in dollars or any other currency\n  language: `en-US`,\n};\n\nconst num = 3505930;\n\n// console.log(`in the USA`, Intl.NumberFormat(`en-US`, options).format(num));\n\nconst lamba = 18948743;\n\nlet pulana = new Intl.NumberFormat(options.language, {\n  style: `currency`,\n  currency: options.currency,\n}).format(lamba);\n\nconsole.log(pulana);\n\nconst currentDate = new Date();\n\nlet pulanaDate = new Intl.DateTimeFormat(`en-US`, {\n  day: `numeric`,\n  month: `long`,\n  year: `numeric`,\n}).format(currentDate);\n\nconsole.log(pulanaDate);\n\nconst days_passed = function (date1, date2) {\n  return (date2 - date1) / (1000 * 60 * 60 * 24);\n};\n\nconst days = days_passed(new Date(2037, 3, 14), new Date(2037, 3, 24));\nconsole.log(days);\n\n// set timeout\nsetTimeout(function () {\n  console.log(`here is your pizza`);\n}, 3000);\nconsole.log(`waiting`);\n// u can not pass an argument here lyk the other we pass it after the time we set\n\nconst content = [`egg`, `fish`];\n\nconst indomie = setTimeout(\n  function (ing1, ing2) {\n    console.log(`we got your order of indomie with ${ing1} and ${ing2}`);\n  },\n  3000,\n  // this is how arguments are passed here\n  ...content // or we can also pass an argument as shown below by creating an array\n  // `egg`,\n  // `fish`\n);\nif (content.includes(`crayfish`)) {\n  clearTimeout(indomie);\n}\nsetInterval(function () {\n  const new_time = new Date();\n\n  const internationalized = new Intl.DateTimeFormat(`en-US`, {\n    hour: `2-digit`,\n    minute: `2-digit`,\n    second: `2-digit`,\n  }).format(new_time);\n  // labelWelcome.textContent = ` ${internationalized}`;\n  // console.log(internationalized);\n}, 1000);\n"],"names":["account1","owner","movements","interestRate","pin","movementsDates","currency","locale","account2","accounts","labelWelcome","document","querySelector","labelDate","labelBalance","labelSumIn","labelSumOut","labelSumInterest","labelTimer","containerApp","containerMovements","btnLogin","btnTransfer","btnLoan","btnClose","btnSort","inputLoginUsername","inputLoginPin","inputTransferTo","inputTransferAmount","inputLoanAmount","inputCloseUsername","inputClosePin","movementDate","date","daysPassed","date2","Date","date1","Math","round","abs","Intl","DateTimeFormat","format","displayMovements","acc","sort","innerHTML","slice","a","b","forEach","mov","i","type","html","NumberFormat","style","insertAdjacentHTML","calcDisplayBalance","balance","reduce","calculatedbal","textContent","calcDisplaySummary","incomes","filter","suminalculation","out","outcalculation","interest","map","deposit","int","arr","intrestcalculation","createUsernames","accs","username","toLowerCase","split","name","join","updateUI","startlogoutTimer","tick","min","String","trunc","time","padStart","sec","setTimeout","opacity","clearInterval","timer","setInterval","currentAccount","newDate","argue","hours","minite","day","month","year","addEventListener","e","preventDefault","find","value","console","log","blur","amount","receiverAcc","push","toISOString","floor","Number","some","index","findIndex","splice","sorted","options","unit","language","num","lamba","pulana","currentDate","pulanaDate","days_passed","days","content","indomie","ing1","ing2","includes","clearTimeout","new_time","hour","minute","second"],"version":3,"file":"index.4b9da7f5.js.map"}